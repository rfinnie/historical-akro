#!/usr/local/bin/perl
# 1999/01/28 - Jim.Fondren@pobox.com - created
# 1999/01/28 - jcf - Acronym bot for IRC
# 2001/08/17 - jcf - playability enhancements. updating to v1.0 from v0.9
#

$| = 0;
use Net::IRC;
use Config::IniFiles;
$irc = new Net::IRC;

%svrlist = ();
$svrini = new Config::IniFiles(-file => "servers.ini");
foreach $x ($svrini->Sections) {
  $svrlist{$x} = {
    'nick' => $svrini->val($x, 'nick'),
    'servers' => $svrini->val($x, 'servers'),
    'ircname' => $svrini->val($x, 'ircname'),
    'channel' => $svrini->val($x, 'channel')
  };
  print "Loaded $x from INI\n";
}

$confini = new Config::IniFiles(-file => "config.ini");

$game=0;
$game_starting=0;
$round_started_time=0; 
$msg_time=0;
$acro="";
$acro_length=0;
$acro_disp="";
%players=();
@voting_order=();

sub on_connect {
  my $self = shift;
  my($channel, $sname);
  $sname = $self->{'net'};
      if($svrini->val($sname, 'nickserv_password')) {
        print "$sname: Registering with NickServ\n";
        $self->privmsg('NickServ', 'IDENTIFY ' . $svrini->val($sname, 'nickserv_password'));
      }
      foreach $channel (split(/,/, $svrini->val($sname, 'channel'))) {
        print "$sname: Connected.  Joining $channel\n";
        $self->join($channel);
      }
      $svrlist{$sname}->{'available'} = 1;
      $self->mode($channel,"+nt");
      srand(time);
}

sub on_action {
  my ($self, $event) = @_;
  my ($nick, $arg) = ($event->nick, $event->args);
  my($channel) = ($event->to)[0];

  pumpothers_action($nick, $self->{'net'}, $arg, $channel);
}

sub on_join {
  my ($self, $event) = @_;
  my ($channel) = ($event->to)[0];

  pumpothers_join($event->nick, $self->{'net'}, $channel);

  if ($event->userhost=~/imaji\.net$/) {
    $self->mode($channel,"+o",$event->nick);
  } elsif ($event->userhost=~/cartotech\.com$/) {
    $self->mode($channel,"+o",$event->nick);
  } else {
    $self->notice($event->nick,"Play acro? For help message me \"help\"");
  }
}

sub on_part {
  my ($self, $event) = @_;
  my ($channel) = ($event->to)[0];

  pumpothers_part($event->nick, $self->{'net'}, $channel);
}



sub on_public {
  my ($self, $event) = @_;
  my ($to) = $event->to;
  my ($nick,$mynick) = ($event->nick, $self->nick);
  my ($arg) = ($event->args);

  pumpothers_privmsg($nick, $self->{'net'}, $arg, $to);
  if (!$game && !$game_starting) {
    if ($arg eq "start") {
      &start_game($self);
    }
  }
}

sub on_msg {
  my ($self,$event) = @_;

  if(substr(($event->args)[0], 0, 1) eq ":") {
    process_command($self, $event, $self->{'net'})
  } else {
    $msg_time=time();
    if ($listening_for_acros) {
      &handle_acro_submission($self,$event,$self->{'net'});
    } elsif ($listening_for_votes) {
      &handle_acro_votes($self,$event,$self->{'net'});
    } else {
      $self->notice($event->nick,"We're not in play right now. Are we lagged?");
      $self->notice($event->nick,"When I display an acronym...");
      $self->notice($event->nick,"... MSG me a phrase");
      $self->notice($event->nick,"When I ask for votes...");
      $self->notice($event->nick,"... MSG me the NUMBER of the best phrase");
    }
  }
}

sub process_command {
  my($self, $event, $net) = @_;
  my $admin_password = $confini->val('config', 'admin_password');

  my($command, $password, @args) = split(/ /, substr(($event->args)[0], 1));
  if($password eq $admin_password) {
    if($command eq "netstatus") {
      foreach $sname ($svrini->Sections) {
        $self->privmsg($event->nick, "$sname:");
        $self->privmsg($event->nick, "  Nickname:  " . $svrini->val($sname, 'nick'));
        $self->privmsg($event->nick, "  Server:    " . $svrlist{$sname}->{'svr'}->{'server'} . ":" . $svrlist{$sname}->{'svr'}->{'port'});
        $self->privmsg($event->nick, "  IRC Name:  " . $svrini->val($sname, 'ircname'));
        $self->privmsg($event->nick, "  Channel:   " . $svrini->val($sname, 'channel'));
        $self->privmsg($event->nick, "  Available: " . ($svrlist{$sname}->{'available'} ? 'Yes' : 'NO'));
        $self->privmsg($event->nick, " ");
      }
    } elsif($command eq "stopnet") {
      $stopnet = $args[0];
      $self->privmsg($event->nick, "Stopping net $stopnet");
      stopnet($stopnet);
    } elsif($command eq "startnet") {
      $startnet = $args[0];
      $self->privmsg($event->nick, "Starting net $startnet");
      startnet($startnet);
    } elsif($command eq "shutdown") {
      $self->privmsg($event->nick, "Shutting down...");
      foreach $sname ($svrini->Sections) {
        stopnet($sname);
      }
      exit 0;
    }
  }
}

sub start_game {
  my $self=$_[0];
  my $rounds = $confini->val('config', 'rounds');
  pump_privmsg("====================== AKRO ====================");
  pump_privmsg("When I display an ACRONYM, message me the best");
  pump_privmsg("phrase you'd like for that acronym.");
  pump_privmsg(" ");
  pump_privmsg("When I display everyone's phrases, message me the nbumber");
  pump_privmsg("of the phrase you think is best (not your own!)");
  pump_privmsg("The votes you get increase your score. ");
  pump_privmsg("You may even get bonuses!");
  pump_privmsg(" ");
  pump_privmsg("Get ready! Round 1 (of $rounds) starts in 20 seconds!");
  pump_privmsg("====================== AKRO ====================");
  $game_starting=1;
  $self->schedule(20,\&setup_new_game,$self);
}

sub setup_new_game {
  my $self = $_[0];
  $game=1;
  %players=();
  $round=1;
  &start_round($self);
}

sub start_round {
  my $self = $_[0];
  my $acro_think_time = $confini->val('config', 'acro_think_time');
  &generate_acronym;
  pump_privmsg("==== AKRO ROUND $round STARTING ====");
  pump_privmsg("==== The acronym for round $round is $acro ( $acro_disp )");
  pump_privmsg("You have $acro_think_time seconds to msg me your phrases");
  $listening_for_acros=1;
  $listening_for_votes=0;
  $self->schedule($acro_think_time-10,\&ten_second_warning,$self);
  $self->schedule($acro_think_time+10,\&end_round,$self);
  $round_started_time=time();
}

sub end_round {
  my $self=$_[0];
  $listening_for_acros=0;
  $listening_for_votes=1;
  pump_privmsg("==== Sorry!  Time is up! ====");
  pump_mode("+m");
  pump_privmsg("==== Here are the acros for $acro in round $round");
  my %randomize=();
  foreach $userhost (keys %players) {
    if ($players{$userhost}{"round"}==$round) {
      $randomize{$userhost}=rand;
    }
  }
  @voting_order=();
  my $player=1;
  foreach $userhost (sort {$randomize{$a} <=> $randomize{$b}} keys %randomize) {
    push(@voting_order,$userhost);
    pump_privmsg(" $player - ".$players{$userhost}{"acro"});
    $player++;
  }
  pump_privmsg("==== MSG ME YOUR VOTE NOW (you have 45 seconds) ====");
  pump_mode("-m");
  $self->schedule(40,\&five_second_warning,$self);
  $self->schedule(50,\&end_voting,$self);
}

sub five_second_warning {
  pump_privmsg("==== 5 SECONDS! ====");
}

sub end_voting {
  my $self=$_[0];
  my $i=1;
  my $bonus_time = $confini->val('config', 'bonus_time');
  my $bonus_points = $confini->val('config', 'bonus_points');
  my $vote_points = $confini->val('config', 'vote_points');
  my $rounds = $confini->val('config', 'rounds');
  $listening_for_votes=0;
  pump_privmsg("==== TIMES'S UP! ====");
  foreach $userhost (@voting_order) {
    $nick=$players{$userhost}{"nick"};
    $acro=$players{$userhost}{"acro"};
    $time=$players{$userhost}{"time"};
    $vote=$players{$userhost}{"vote"}{$round};
    $votes=$players{$userhost}{"votes"}{$round};
    $votes=0 if !$votes;
    pump_privmsg("$i - $acro ($nick"."'s) - $votes votes");
    $i++;
    if (!$vote) {
      pump_privmsg("But didn't vote so won't score");
      next;
    }
    if ($time<$bonus_time) {
      if (!$votes) {
        pump_privmsg("(no votes so no speed bonus)");
      } else {
        pump_privmsg("Plus $bonus_points points for speed!");
        $players{$userhost}{"score"}+=$bonus_points;
      }
    }
    if ($votes) {
      $players{$userhost}{"score"}+=$votes*$vote_points;
    }
  }
  my $buf="Scores:";
  foreach $userhost (
    sort { $players{$b}{"score"} <=> $players{$a}{"score"} } keys %players ) {
    $buf.=" ".$players{$userhost}{"nick"}.":".$players{$userhost}{"score"};
  }
  pump_privmsg($buf);
  pump_privmsg("==== END OF ROUND $round ====");
  if (++$round>$rounds) {
    &end_game($self);
    return;
  }
  pump_privmsg("==== Round $round starts in 20 seconds! ====");
  $self->schedule(25,\&start_round,$self);
}

sub end_game {
  $self=$_[0];
  pump_privmsg("==== AND THE WINNER IS... ====");
  my $highest=-1;
  my $userhost;
  my $score;
  my $winner;
  foreach $userhost (keys %players) {
    $score=$players{$userhost}{"score"};
    if ($score>$highest) {
      $winner=[$userhost];
      $highest=$score;
    } elsif ($score==$highest) {
      push(@{$winner},$userhost);
    }
  }
  foreach $userhost (@{$winner}) {
    pump_privmsg(" WINNER ===> ".$players{$userhost}{"nick"});
  }
  $game=0;
  $game_starting=0;
  pump_privmsg("Thanks for playing. Type: \"start\" for a new game");
}
    
sub ten_second_warning {
  my $self=$_[0];
  pump_privmsg("==== Hurry up! You've got 10 seconds left");
}

sub handle_acro_submission {
  my ($self,$event,$net) = @_;
  my ($realnick) = $event->nick;
  my ($nick) = $realnick . '@' . $net;
  my ($userhost) = $net . ':' . $event->userhost;
  my ($arg) = $event->args;
  my (@words)=split(' ',$arg);
  if (@words!=$acro_length) {
    $self->notice($realnick,"ERROR:  There were ".scalar(@words)." words".
      " in your acro but there are $acro_length letters in the acronym");
    if (scalar(@words) < $acro_length) {
      pump_privmsg(&insult($nick,"gave a short phrase"));
    } else {
      pump_privmsg(&insult($nick,"gave a long phrase"));
    }
    
    return;
  }
  for (my $i=0; $i<$acro_length; $i++) {
    if (uc(substr($words[$i],0,1)) ne substr($acro,$i,1)) {
      $self->notice($realnick,"ERROR: You said ".$words[$i]."??");
      pump_privmsg(&insult($nick,"fails the A B C's"));
      return;
    }
    if ($words[$i]!~/^[a-zA-Z!;,\.\?]+$/) {
      $self->notice($realnick,"ERROR: Invalid special chars in your acro");
      pump_privmsg(&insult($nick,"should stick to the alphabet"));
      return;
    }
  }
  my $think_time=$msg_time-$round_started_time;
  $players{$userhost}{"nick"}=$nick;
  $players{$userhost}{"acro"}=$arg;
  $players{$userhost}{"time"}=$think_time;
  $players{$userhost}{"round"}=$round;
  $players{$userhost}{"score"}+=0;
  $self->notice($realnick,"Got your phrase in $think_time seconds!");
  pump_privmsg("Received a phrase in $think_time seconds");
}

sub handle_acro_votes {
  my ($self,$event,$net) = @_;
  my ($realnick) = $event->nick;
  my ($nick) = $realnick . '@' . $net;
  my ($userhost) = $net . ':' . $event->userhost;
  my ($arg) = $event->args;
  my $vote=0;
  if (!$players{$userhost}) {
    $self->notice($realnick,"Only players can vote!");
    return;
  }
  if ($arg=~/^\s*(\d+)\s*$/) {
    $vote=$1;
  } else {
    $self->notice($realnick,"Your vote has to be a number from 1 to ".
      scalar(@voting_order));
    return;
  }
  if ($vote<1 || $vote>@voting_order) {
    $self->notice($realnick,"Your vote has to be a number from 1 to ".
      scalar(@voting_order));
    return;
  }
  if ($userhost eq $voting_order[$vote-1]) {
    $self->notice($realnick,"Hahaha, we don't let you vote for yourself.");
    return;
  }
  my $old_vote=$players{$userhost}{"vote"}{$round};
  if ($old_vote) {
    $players{$voting_order[$old_vote-1]}{"votes"}{$round}--;
    $self->notice($realnick,"Your vote has been changed.");
  } else {
    $self->notice($realnick,"Your vote has been tallied. Thanks!");
  }
  $players{$userhost}{"vote"}{$round}=$vote;
  $players{$voting_order[$vote-1]}{"votes"}{$round}++;
}

sub generate_acronym {
  my $acro_length_string = $confini->val('config', 'acro_length_string');
  my $acro_char_string = $confini->val('config', 'acro_char_string');

  my $acro_length_string_length=length($acro_length_string);
  my $acro_char_string_length=length($acro_char_string);
  $acro_length=substr(
    $acro_length_string,
    int(rand()*$acro_length_string_length),
    1
  );
  $acro="";
  my %used=();
  my $letter;
  while (length($acro)<$acro_length) {
    $letter=substr(
      $acro_char_string,
      int(rand()*$acro_char_string_length),
      1
    );
    next if $used{$letter};
    $used{$letter}++;
    $acro.=$letter;
  }
  $acro=uc($acro);
  $acro_disp=join(' ',split('',$acro));
}

sub insult {
  my ($nick,$reason) = @_;
  my @insults=split(/\n/,<<"EOT");
What a wanker!
What a mar000000n!
Can it get any uglier?
Where'd your brains come from?
Do you fuck goats too?
EOT
  return "$nick $reason. ".$insults[int(rand()*scalar(@insults))];
}

sub on_ping {
  my ($self, $event) = @_;
  my $nick = $event->nick;
  $self->ctcp_reply($nick, join(' ',($event->args)));
}

sub on_version {
  my ($self, $event) = @_;
  my $nick = $event->nick;
  $self->ctcp_reply($nick, "VERSION akro.pl v0.9 - I'm a NICE game bot");
}

sub on_source {
  my ($self, $event) = @_;
  my $nick = $event->nick;
  $self->ctcp_reply($nick, "SOURCE akro.pl v0.9 - www.cpan.org *when complete*");
}

sub pump_mode {
  my($mode) = shift;
  foreach $x ($svrini->Sections) {
    foreach $channel (split(/,/, $svrini->val($x, 'channel'))) {
      $svrlist{$x}->{'svr'}->mode($channel, $mode);
    }
  }
}

sub pump_privmsg {
  my($msg) = shift;
  foreach $x ($svrini->Sections) {
    foreach $channel (split(/,/, $svrini->val($x, 'channel'))) {
      $svrlist{$x}->{'svr'}->privmsg($channel, $msg);
    }
  }
}

sub pumpothers_privmsg {
  my($nick, $net, $msg, $nchannel) = @_;
  foreach $x ($svrini->Sections) {
    foreach $channel (split(/,/, $svrini->val($x, 'channel'))) {
      next if ($net eq $x) && ($channel eq $nchannel);
      $svrlist{$x}->{'svr'}->privmsg($channel, "$nchannel/$net: <$nick> $msg");
    }
  }
}

sub pumpothers_action {
  my($nick, $net, $msg, $nchannel) = @_;
  foreach $x ($svrini->Sections) {
    foreach $channel (split(/,/, $svrini->val($x, 'channel'))) {
      next if ($net eq $x) && ($channel eq $nchannel);
      $svrlist{$x}->{'svr'}->privmsg($channel, "$nchannel/$net: * $nick $msg");
    }
  }
}

sub pumpothers_join {
  my($nick, $net, $nchannel) = @_;
  foreach $x ($svrini->Sections) {
    next if $net eq $x;
    foreach $channel (split(/,/, $svrini->val($x, 'channel'))) {
      $svrlist{$x}->{'svr'}->privmsg($channel, "*** $nick\@$net has joined $nchannel");
    }
  }
}

sub pumpothers_part {
  my($nick, $net, $nchannel) = @_;
  foreach $x ($svrini->Sections) {
    next if $net eq $x;
    foreach $channel (split(/,/, $svrini->val($x, 'channel'))) {
      $svrlist{$x}->{'svr'}->privmsg($channel, "*** $nick\@$net has left $nchannel");
    }
  }
}

sub on_disconnect {
    my ($self, $event) = @_;
    print "Disconnected from ", $event->from(), " (",
      ($event->args())[0], "). Attempting to reconnect...\n";
    $self->connect();
}

sub startnet {
  my($x) = $_[0];
  my(@servers) = split(/\|/, $svrini->val($x, 'servers'));
  $server = $servers[int(rand($#servers + 1))];
  ($server, $port) = split(/:/, $server, 2);
  $port = ($port ? $port : 6667);
  print "$x: Connecting to $server:$port\n";
  $svrlist{$x}->{'svr'} = $irc->newconn(
    Nick    => $svrini->val($x, 'nick'),
    Server  => $server,
    Port    => $port,
    Ircname => $svrini->val($x, 'ircname')
  );
  if($svrlist{$x}->{'svr'}) {
    $svrlist{$x}->{'svr'}->{'net'} = $x;
    $svrlist{$x}->{'svr'}->{'server'} = $server;
    $svrlist{$x}->{'svr'}->{'port'} = $port;
    $svrlist{$x}->{'svr'}->add_handler('msg',    \&on_msg); 
    $svrlist{$x}->{'svr'}->add_handler('public',    \&on_public);
    $svrlist{$x}->{'svr'}->add_handler('cping',    \&on_ping);
    $svrlist{$x}->{'svr'}->add_handler('cversion',  \&on_version);
    $svrlist{$x}->{'svr'}->add_handler('caction',  \&on_action);
    $svrlist{$x}->{'svr'}->add_handler('csource',  \&on_source);
    $svrlist{$x}->{'svr'}->add_handler('join',    \&on_join);
    $svrlist{$x}->{'svr'}->add_handler('part',    \&on_part);
    $svrlist{$x}->{'svr'}->add_global_handler(376,  \&on_connect);
    $svrlist{$x}->{'svr'}->add_global_handler('disconnect', \&on_disconnect);
    $svrlist{$x}->{'available'} = 1;
  } else {
    $svrlist{$x}->{'available'} = 0;
  }
}

sub stopnet {
  my($stopnet) = $_[0];
  $svrlist{$stopnet}->{'available'} = 0;
  $svrlist{$stopnet}->{'svr'}->quit("By request");
  delete($svrlist{$stopnet}->{'svr'});
}


foreach $x ($svrini->Sections) {
  startnet($x);
}


$irc->start;
